/* sursa: 
https://www.youtube.com/watch?v=95GHRweCjkA&ab_channel=badellmaman */

/* :first-child, :last-child, ::before și ::after. */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-size: 28px;
}

.menu {
  background-color: rgb(50, 50, 136);
  padding: 0.8em;
}

.menu a {
  display: inline-block;
}

.sub-menu a {
  display: block;
}

.menu > li {
  position: relative;
  display: inline-block;
  list-style-type: none;
}

.menu > li > a {
  text-decoration: none;
  color: aliceblue;
  margin-right: 2.7em;
}

.menu > li > a:hover,
.menu > li > a:active,
.menu > li > a:focus {
  color: yellow;
}

.sub-menu {
  position: absolute;
  top: 100%;
  left: 0;
  display: none;
  background-color: rgb(99, 209, 209);
  padding: 0 0.8em;
  /* border: 2px solid rgb(50, 50, 136); */
  border-radius: 0.5em;
  box-shadow: 0 0 6px rgba(18, 18, 39, 0.514);
}

.sub-menu > li {
  list-style-type: none;
}

.sub-menu > li > a {
  text-decoration: none;
  color: black;
}

/* top: 100% setează distanța dintre marginea de sus a submeniului și marginea de jos a elementului părinte. În acest caz, va poziționa submeniul direct sub elementul părinte.*/

.menu li:hover .sub-menu {
  display: block;
}

.text {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgb(152, 199, 199);
  margin: 3em 10em;
  padding: 2em;
  border: 2em solid rgba(50, 50, 136, 0.397);
}

.text2 {
  display: flex;
  flex-direction: column;
  gap: 1em;
  justify-content: center;
  align-items: center;
  background-color: rgb(152, 199, 199);
  margin: 3em 10em;
  padding: 2em;
  border: 2em solid rgba(50, 50, 136, 0.397);
}

.text2::before {
  content: "";
  display: block;
  width: 2em;
  height: 2em;
  background-color: red;
}
.text2::after {
  content: "";
  display: block;
  width: 2em;
  height: 2em;
  background-color: rgb(31, 33, 136);
}

/* pseudoelementele before si after pot fi folosite doar asupra elementelor detinatoare de continut si nu pot fi folosite in cazul elementelor lipsite de continut, cum ar fi "input" */

/*Sursa 
https://www.youtube.com/watch?v=OtBpgtqrjyo&ab_channel=WebDevSimplified 

https://www.youtube.com/watch?v=xoRbkm8XgfQ&ab_channel=KevinPowell

am ramas la min 3:35*/

.form {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 2em;
  margin: 3em;
}
.required::after {
  content: "*";
}

[data-tooltip] {
  position: relative;
}

[data-tooltip]:hover::after {
  content: attr(data-tooltip);
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  margin-top: 5px;
  padding: 5px;
  background-color: lightblue;
}

/* putem avea doar un pseudoelement before si unul after in jurul fiecarui element. nu putem avea doua pseudoelemente */

.before-title::before {
  content: url(../../grid/grid2/img-grid2/castel.jpg);
}

.blockquote::before {
  content: open-quote;
}
.blockquote::after {
  content: close-quote;
}

a[data-tool-tip] {
  position: relative;
}

a[data-tool-tip]::after {
  content: attr(data-tool-tip);
  display: block;
  position: absolute;
  background-color: rgba(128, 128, 128, 0.288);
  padding: 1em 3em;
  color: azure;
  border-radius: 5px;
  font-size: 0.8em;
  bottom: 0;
  left: 0;
  white-space: nowrap;
  transform: scale(0);
  transition: transform ease-out 150ms, bottom ease-out 150ms;
}

a[data-tool-tip]:hover::after {
  transform: scale(1);
  bottom: 100%;
}

/* Proprietatea transform cu valoarea scale(0) va face ca elementul selectat (in acest caz, a[data-tool-tip]::after) să fie redus la dimensiunea zero, fără să schimbe poziția sa în pagină.

Acest lucru va face ca elementul să nu fie vizibil inițial, dar când utilizatorul va plasa cursorul mouse-ului peste elementul respectiv (utilizând hover-ul), proprietatea transform va fi schimbată pentru a mări dimensiunea elementului înapoi la dimensiunea sa normală. Mai precis, când utilizatorul va plasa cursorul mouse-ului peste elementul respectiv, se va aplica o altă regulă CSS care va schimba valoarea proprietății transform la scale(1), făcând elementul vizibil pentru utilizator.

Astfel, acest cod CSS creează un efect de afișare ascunsă (tooltip) care se afișează atunci când utilizatorul plasează cursorul mouse-ului peste elementul selectat. 

Proprietatea transition permite definirea unei tranziții (efect de animare) pentru o proprietate CSS atunci când aceasta este modificată. În acest caz, proprietatea transition se aplică proprietății transform, care schimbă dimensiunea elementului selectat în funcție de valoarea sa.

Mai exact, proprietatea transition este definită astfel: transition: transform ease-out 150ms;. Aceasta indică faptul că atunci când proprietatea transform se schimbă, efectul de tranziție va fi aplicat prin trecerea treptată (ease-out) a proprietății transform pe o perioadă de timp de 150 milisecunde.

Astfel, atunci când utilizatorul plasează cursorul mouse-ului peste elementul selectat (utilizând hover-ul), proprietatea transform se schimbă de la scale(0) la scale(1). Proprietatea transition face ca această tranziție să fie realizată printr-un efect de mărire progresivă a elementului într-un timp de 150 de milisecunde. Acest efect de tranziție face afișarea ascunsă (tooltip) mai plăcută vizual pentru utilizatorul final.*/

/* /////////////////////////////////////////////////////// */
/* Sistem de numerotare automata cu CSS si pseudoclasa before */
/* ////////////////////////////////////////////////////////// */

.counters {
  margin-top: 7em;
  padding: 5em 8em;
  background: lightblue;
  text-align: left;

  counter-reset: counter-name;
  counter-reset: ordered-list;
  /* counter-name este un titlu dat de noi 
  la fel si ordered-list*/
}

.section {
  position: relative;
}

.section::before {
  counter-increment: counter-name;
  /* cand intram in div, se reseteaza, apoi de fiecare data cand da de clasa section, se incrementeaza 1 2 3... */
  content: counter(counter-name);
  position: absolute;
  left: -2.5em;
  top: -0.5em;
  background: white;
  width: 2em;
  height: 2em;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 3px solid gray;
  color: gray;
  box-sizing: border-box;
}

/* deci aceste pseudoelemente before care sunt create ca elemente separate carora noi le definim proprietatile, ele pot fi manipulate oricum ne dorim si in cele din urma se afiseaza ca niste elemente html obisnuite*/

/* putem face acelasi lucru ci listele */

.counters ol {
  /* counter-reset: ordered-list; */
  list-style: none;
}

.counters li::before {
  counter-increment: ordered-list;
  content: "list item " counter(ordered-list) ") ";
  font-size: 0.8em;
}

/* daca mai cream inca o lista la fel, numerotarea va incepe de la 1 in a doua lista, dar daca plasam intregul cod de mai sus la clasa counters in loc de ol, numerotarea va fi continua, adica in cea de-a doua lista numaratoarea va continua, nu o va lua de la capat  */

/* firs-child, last-child, nth-child */

.counters > ol > li:nth-child(even) {
  color: blue;
}

.counters > ol > li:not(.yes) {
  color: brown;
}

/* alt exemplu ar fi sa selectam toate linkurile, mai putin nav linkul cu clasa acestuia */

.counters > :nth-child(3 of .section) {
  color: red;
}

p:first-child,
p:last-child {
  color: greenyellow;
}

/* in cadrul divului cu clasa container-first-last, nu s-a colorat verde primul paragraf al fiecarul div interior pentru ca primul paragraf nu reprezinta primul element al divului, ci h1 este primul element al divului. am sters h1 din al doilea div si s-a colorat primul paragraf inclusiv

sursa: https://www.youtube.com/watch?v=l9naF95Wzg4&t=2s&ab_channel=Chidre%27sTechTutorials*/
